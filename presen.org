#+title: Yet Another Org-mode Presentation Script
#+author: Masataro Asai
#+include: "head.org"
#+LINK: img file:img/%s
#+LINK: png file:img/%s.png
#+LINK: jpg file:img/%s.jpg
#+LINK: spng file:img/static/%s.png
#+LINK: sjpg file:img/static/%s.jpg

#+begin_outline-text-1
#+begin_xlarge
#+begin_center
Big Ideas
#+end_center
#+end_xlarge

#+begin_center
*WARN* Turn off your custom keyboard shortcuts
#+end_center

#+begin_note
#+begin_alignright
Made by guicho2.71828 (Masataro Asai)
#+end_alignright
#+end_note
#+end_outline-text-1

* -

#+begin_xlarge
#+begin_center
Physical Symbol Systems Hypothesis
#+end_center
#+end_xlarge

* Physical Symbol Systems Hypothesis

Alan Newell, Harbert Simon, 1975

1975 ACM Turing Award lecture

Tries to describe the field of *Computer Science* as an instance of *empirical science*

** Laws of Qualitative Structure

+ Science is driven by *qualitative* hypotheses
  which causes a *Paradigm Shift*
  + Cell Doctrine in Biology
    + The basic building block of living organism *should be a cell*.
      + What is a cell? (studied later)
  + Plate tectonics in Geology
    + The basic building block of earth clust *should be a moving plate*.
      + Why and how? (studied later)
      + Evidence is found everywhere now
  + Germ theory of Disease
    + *Most* diseases are caused by multiplication of germs inside body
    + Not claimin it is always so
  + Atomism in Chemistry
    + The basic building block of matter *should be an atom.*
+ *What is the equivalent for Computer Science?*

** Qualitative Hypothesis for CS

#+begin_quote
*The Physical Symbol System Hypothesis*: A physical symbol system has the
 *necessary* and *suffcient* means for general intelligent action.
#+end_quote

+ Physical Symbol System ::
     The system is realizable/engineered. i.e. human, computer
+ Physical Symbol ::
  + Not just human symbol systems (words like "cat"); include machine symbols.
  + Physical patterns in the real world. ( e.g. patterns that are common in the visual depiction of "1"s)

** Symbols

#+begin_quote
A physical symbol system consists of a set of entities, called symbols, which are physical patterns
#+end_quote

(not specify what kind of patterns they are, but something like the patterns in "1" or ☺)

#+begin_src C

static *void A;                      /* A is a symbol */
static *void B;                      /* B is another symbol */

&A;                             /* The content/value disignated by the symbol A */
                                /* We don't know what it is (hence *void),  */
                                /* but it is *some* pattern */

*A;                             /* The symbol itself */
#+end_src

#+begin_src lisp

(defvar a)
(defvar b)

a                  ; a is the value of the symbol 'a
'a                 ; 'a is a symbol (quoted)
(quote a)          ; 'a is an abbreviation of an expression (quote a)

;; Using a symbol automatically inserts an entity in a global symbol table.
;; This information is removed in C after compilation

(do-all-symbols (s)
   (print s))      ; Loop for all symbols defined in the current environment
                   ; No equivalent in C...
#+end_src

*** Sometimes not removed... but not accessible within programs    :noexport:

: objdump -T /usr/lib/x86_64-linux-gnu/libcurl.so
: 
: /usr/lib/x86_64-linux-gnu/libcurl.so:     ファイル形式 elf64-x86-64
: 
: DYNAMIC SYMBOL TABLE:
: 0000000000000000      DF *UND*	0000000000000000  OPENSSL_1.0.0 BN_print
: 0000000000000000      DF *UND*	0000000000000000  OPENSSL_1.0.0 MD5_Init
: 0000000000000000      DF *UND*	0000000000000000  GLIBC_2.2.5 fileno
: ...
: 0000000000036f30 g    DF .text	000000000000034a  CURL_OPENSSL_3 curl_multi_wait
: 000000000003b900 g    DF .text	0000000000000078  CURL_OPENSSL_3 curl_share_strerror

** Expression, or Symbol Structure

#+begin_quote
... physical patterns that can occur as components of another type of entity
called an expression (or symbol structure).
#+end_quote

#+begin_src C

*void plus(*void a, *void b);     /* plus is a symbol (pointer to the compiled instructions) */

void* exp[3] = {plus, a, b} ;      /* an expression containing plus, A, B */

#+end_src

#+begin_src lisp

;; Symbolic Expresssion / S-Expression / S-EXP / sexp, quoted

'(+ a b)

#+end_src

** Process (== Procedure, Functions)

#+begin_quote
Besides these structures, the system also contains a collection of processes
that *operate on expressions to produce other expressions*.
#+end_quote

#+begin_src C

*void concat(*void a, *void b){
   /* omitted */
}

void* exp1[3] = {plus, a, b} ;      /* an expression containing plus, A, B */
void* exp2[3] = {plus, c, d} ;      /* an expression containing plus, A, B */

void* exp3[6] = concat(exp1, exp2);
// --> {plus, a, b, plus, c, d}   i.e. concat produces a new expression.

#+end_src

#+begin_src lisp

(append '(+ a b) '(+ c d)) ;; -> '(+ a b + c d)

#+end_src

** Essential requirements of symbols / sexps

#+begin_quote
*Designation*. An expression designates an object if, given the expression, the system can either
affect the object itself or behave in ways dependent on the object. (Designate = bind, pointer reference)
#+end_quote

: *B = A                          /* B designates A */

E.g. complex patterns in images, or complex patterns in motor activity e.g. walk

#+begin_quote
*Interpretation*. The system can interpret an expression if the expression designates a process
and if, given the expression, the system can *carry out* the process. (Carry out = execute, run)
#+end_quote

Carry out =(+ a b)= : Follow the function pointer and compute the value of =a + b=

** Essential requirements of sexps : completeness / closure

#+begin_quote
*Arbitraryness*: A symbol may be used to designate any expression.
#+end_quote

-> Can be rephrased in modern terms as: There is no types in "ideas"; Can be repurposed freely.

#+begin_src C
void* exp3[6] = concat(exp1, exp2); // exp1, exp2, exp3 are themselves symbols.
*exp3 = A;                          // It can be re-assigned to just a single symbol.
#+end_src

#+begin_src lisp
(setf exp3 A)
#+end_src

** Other essential requirements of sexps :

+ There exist *expressions that designate every process* of which the machine is capable.
  + This obviously suggests the existence of =EVAL= function.
  + In case of planning, it is PDDL. (A machine restricted to a regular grammar)
+ There exist *processes for creating any expression* and for modifying them in any ways.
  + Again, EVAL.
+ *Stableness*: Expressions are stable.
  + once created they will continue to exist until explicitly modified or deleted.
+ *Unbounded* : The number of expressions is essentially unbounded.
  + Dynamically allocated memory; Not common in the earliest computers.

#+begin_quote
The type of system we have just defined is not unfamiliar to computer scientists. It bears a strong family
resemblance to sit general purpose computers. If a symbol manipulation language, such as LISP, is taken
as defining a machine, then *the kinship becomes truly brotherly*.
#+end_quote

This architecture is still a good model of today's computers.

** The Physical Symbol System Hypothesis.

#+begin_quote
A physical symbol system has the *necessary* and *suffcient* means for general intelligent action.
#+end_quote

+ Necessary :: Any intelligent system will be proved to be a physical symbol system.
+ Sufficent :: If you have a physical symbol system of sufficient size, you can build an AI.

** The Physical Symbol System Hypothesis.

#+begin_quote
A physical symbol system has the *necessary* and *suffcient* means for general intelligent action.
#+end_quote

+ This is a *qualitative* hypothesis.
  + It does not go into details.
  + It does not specify *what* is designated by a symbol,
    + /cell/ is not strictly defined in cell hypothesis. Only later the
      existence of nucleus, protoplasm, membrane are revealed.
+ This is an *empirical* hypothesis.
  + You can build a symbolic system and test its intelligence.
  + You can test an intelligent being (human) and see if it has symbols.
  + You can build an intelligent system without symbols and disprove the hypothesis.
  + Just as *Germ hypothesis*, perhaps only *most* or *some* class of systems may satisfy PSSH.

** The development (history) of PSSH:                              :noexport:

Just briefly

+ *Formal Logic*: "symbol game" w/o meaning. Mechanical operations on highly abstracted expressions
+ *Turing machines*: Defined what is computable. Defined what is information.
  + I/O are 0/1 strings. Data are *stable*
  + The tape has infinite length; *unbounded*
  + Still lacks meaning == *lacks designation* (1st requirement of symbols)
  + Lacks designation == can run a process but cannot designate a process
+ *Stored program* (After Eniac): In-memory programs, not cards
  + program = data. Program pointers *can designate a process*
+ *List processing: LISP*
  + Dynamic memory allocations + lots of pointer operations (cons cell)
  + Defines new functions dynamically (lambdas)
  + Produced a model of designation; Finally formed today's symbol manipulation
  + All tecnhical requirements were satisfied already, but it wasn't until LISP
    that designation+interpretation is considered as the core concept

Theory + Hardware + Ideas were essential

** After PSSH

How to prove PSSH? *Empirically*

#+begin_container-fluid
#+begin_row-fluid
#+begin_span6
*Sufficiency*: Let's build an AI using LISP

Germ theory:
+ Find a disease, then identify the germ.
+ Found many germs, then study the commonarities.
PSSH: Find an intelligent tasks, then write a program.
+ Chess, puzzle, ...
+ Commonarities found: *Heuristic Search Hypothesis* (later)
#+end_span6
#+begin_span6
*Necessity*: Let's find symbols in human (*Cognitive Science*)

+ Observe human behaviors in intelligent tasks
  + Thinking aloud (thinking while uttering one's thought)
+ Came to agree that human have symbols (short term memory, chunks...)
#+end_span6
#+end_row-fluid
#+end_container-fluid

-----

Other evidences: lack of competing hypothesis.
+ Others lack the sufficiency criteria; lacks the attempt to *engineer* it

* -

#+begin_xlarge
#+begin_center
Heuristic Search Hypothesis
#+end_center
#+end_xlarge

Skipped: Essentially telling that *problem solving is a heuristic search*

* Heuristic Search Hypothesis                                      :noexport:

With PSSH, systems can answer a problem. What /is/ a problem?

Plato / Socrates: Found it difficult how to even /come up with/ problems, let alone solving it.

# #+begin_quote
# Meno: And how will you inquire, Socrates,
# into that which you know not? What will you
# put forth as the subject of inquiry? And if you
# find what you want, how will you ever know that
# this is what you did not know?
# #+end_quote

Modern definition of problems:

#+begin_quote
To state a problem is to designate

+ a test for a class of symbol structures (solutions of the problem)
+ a generator of symbol structures (potential solutions).

To solve a problem is to generate a structure, using (2), that satisfies the test of (1).
#+end_quote

#+begin_larger
i.e. *it allows to enumerate & test = search.*
#+end_larger

** Heuristic Search Hypothesis

#+begin_quote
*Heuristic Search Hypothesis*. The solutions to
problems are represented as symbol structures.
A PSS exercises its intelligence in problem solving by search - that is, by
generating and progressively modifying symbol
structures until it produces a solution structure.
#+end_quote

#+begin_larger
i.e. *it is solved by enumerate & test = search.*
#+end_larger

However, in practical systems, the efficiency matters.
Chess players largely prune nodes. So should other intelligence.

** Conditions for Intelligence

+ Do not resort to brute-force search.
+ Extract information from the problem to guide the search
  + test (e.g. goals) and the generator structure (e.g. environment) of the problem
+ Intelligent problems != Large problems.
  + Intelligent problems are exploitable by intelligent systems for minimizing the search effort.

In a chaotic environment (no exploitable information), no intelligence can exist (similar to no free lunch theorem)


* 

+ Brooks, 1991: Intelligence without Representation

  + One of the harsh critisism against PSSH?

+ Vera, Simon 1993 "Situated Action: A Symbolic Interpretation"

  + Rebuttal against /Situated Action/ claims

  + Brooks' claim was one of the leading example of SA claims

I found it really difficult to summarize these discussion; because of so many undefined terms and unproved arguments.

* The summary of Brooks' paper

+ *Primitive agents should be built first / deserves more attention*
+ *Symbolic representation is cheating*
+ Propose *subsumption architecture*
  + Intelligent agent should be built *incrementary*
+ In such an architecture *no central representation is feasible/possible*

** Primitive agents should be built first / deserves more attention

 Because "*Just survive*" *is more difficult than behaving intelligently*

 | yrs ago   |                      |
 |-----------+----------------------|
 | 3.5B      | Single-cell microbes |
 | 2.5B      | plants               |
 | 0.5B/500M | first fish           |
 | 450M      | insects              |
 | 370M      | Reptiles             |
 | 330M      | Dinasors             |
 | 250M      | Mammals              |
 | 120M      | Primates             |
 | 18M       | Greate Apes          |
 | 2.5M      | Man                  |
 | 19k       | Agriculture          |
 | 5k        | Writing              |
 | ~300      | "expert knowledge"   |

So, we build the primitive agents first

My objection:  Matsuo position paper

** Symbolic representation is cheating (Abstraction as a dangerous weapon)

+ AI never has any successes.
  + When a difficult problem (e.g. chess) arise, it is an AI problem.
  + When it was solved, it is no longer an AI problem.
+ AI never fails.
  + AI researchers pick easy problems and call them AI problems.
    + Easy problems: problems that can be symbolically represented
  + Other problems are disregarded as non-AI.

: (can (sit-on person chair)), (can (stand-on person chair))

Above representation discards other aspects: e.g. chairs are soft, it has flat surface, etc.

Also, this abstraction is done by researchers, not automatically (symbol grounding)

** Intelligent agent should be built incrementary

"Creature" robot should:

+ work quickly (reflexive), robustly,
+ be parallel and distributed. multiple goals
+ percept-plan-behave loop is subject to cheating, so don't do that

Subsumption Architecture (summary):

+ Networks of FSMs that independently decides the output (motor) from input (sensors)
+ Lower-level FSMs can suppress the higher-level FSM's output.
  + Avoid -> Wander -> Explore
+ Output is directly connected to actuation. Thus *quick*
+ Network carries just numbers, *no central representation*
+ Lower-level FSMs are debugged carefully
  + When the environments changes, Higher FSMs may fail but Lower FSMs don't
    + Thus *distributed*, *robust*
  + Some ineffective goals are discarded by subsumption, thus *multiple goals*

My objection: This is just same as distributed portfolio of symbolic
agents. FSMs are symbolic functions. But they just have no plans.

** Pic

[[png:static/subsumption]]

* The summary of Situation Actions (SA)

Situated Actions:

#+begin_quote
Behavior is directly and solery affected by the environment, without representation.
#+end_quote

* The summary of rebuttal by Vera, Simon

Several claims from the mixed standpoints are presented in the paper. Consists of three types of rebuttals:

+ Corrects the misinterpretation of PSSH
+ Points out flaws in SA
+ Show examples of SA ideas implemented in symbolic systems

* Misinterpretations

+ Symbol systems require planning --- *not true*.
  + Symbolic representation of reflexes are possible and commonly known.
  + e.g. symbolic production rule (situation -> response)
+ Symbolic knowledge needs to be conscious --- *not true*.
  + Action done subconsciously may have symbolic representation in brain and nothing disproves it.
+ Symbolic systems lack perception --- *not true*.
  + Symbols designates patterns, and patterns are from perceptions of external worlds.

* Points out flaws in various SA 

Human Computer Interaction.

  + Good tools should be transparent, and tools don't have to be like a human. AI is useless
    + Agree, but it is complementary / nothing to do with PSSH
  + Bad tools cause "breakdown"
    + Breakdown = situation of non-obviousness which cause investigation (e.g. error messages)
    + After Breakdown, a person figures out the internal mechanism of a tool (= symbolic understanding)
    + Good tools achieve /readiness-to-hand/ without breakdowns
    + Then internal representation is not necessary
  + But SA claims that the world is cluttered == breakdown is mandatory.

* Affordances

+ Once a technique is learned, then the internal representation is LOST.
  + *Not*. it is just unconscious. (Simon)

+ 急流

I think this is possible sometimes, because people forget.

* Education

+ Better to teach with real objects
  + What is 3/4 of 1/2?
    + 3*1 / 4*2
    + Spread the cheese in circle, divide it in half, spread again, cut out quater
  + Thus, better to use intuitive objects, not symbolic knowledge
+ Simon: Symbolic knowledge itself does not guarantee that the representation is
  connected to the other symbols or external patterns.


  + 
+ There is 
+ Affordances:
  + Once 

* 

* My opinion

